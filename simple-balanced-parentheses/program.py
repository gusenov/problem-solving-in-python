def check(s):
    parentheses = []  # —Ç—É—Ç –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏, —Ç.–µ '('.
    is_balanced = True  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –∫—Ä—É–≥–ª—ã–µ —Å–∫–æ–±–∫–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã.

    for char in s:  # char - –æ—á–µ—Ä–µ–¥–Ω–æ–π —Å–∏–º–≤–æ–ª –≤–≤–µ–¥—ë–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—Ç—Ä–æ–∫–∏.
        if char == '(':
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –Ω–∞—à–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É.
            parentheses.append(char)
        elif char == ')':
            if not parentheses:  # –ø–æ-–¥—Ä—É–≥–æ–º—É —ç—Ç–æ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –∫–∞–∫ parentheses == [].
                # –ú—ã –Ω–∞—à–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω–µ –±—ã–ª–æ –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π.
                is_balanced = False  # –±–∞–ª–∞–Ω—Å –∫—Ä—É–≥–ª—ã—Ö —Å–∫–æ–±–æ–∫ –Ω–∞—Ä—É—à–µ–Ω!
                break
            else:
                # –ú—ã –Ω–∞—à–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–Ω–µ–µ –∑–∞–ø–æ–º–Ω–∏–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é. –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, –∏–¥–µ–º –¥–∞–ª—å—à–µ.
                parentheses.pop()

    if is_balanced and not parentheses:
        return True
    else:
        return False


if __name__ == "__main__":
    for example in ["(1+2*(3+4)-100)", "–ü—Ä–∏–≤–µ—Ç)))", "(cons (fn (car items)) (map fn (cdr items", "))(())(("]:
        if check(example):
            print("{0} ü°∫ –ü–†–ê–í–ò–õ–¨–ù–û".format(example))
        else:
            print("{0} ü°∫ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û".format(example))

# –í—ã–≤–æ–¥:
# (1+2*(3+4)-100) ü°∫ –ü–†–ê–í–ò–õ–¨–ù–û
# –ü—Ä–∏–≤–µ—Ç))) ü°∫ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û
# (cons (fn (car items)) (map fn (cdr items ü°∫ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û
# ))(())(( ü°∫ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û
